package main

import (
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"sort"
	"strconv"
	"strings"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

type Problem struct {
	Number int
	Path   string // –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –æ—Ç problems/... –¥–æ –∑–∞–¥–∞—á–∏
	Title  string
	Level  string
	Link   string
	Tags   []string
}

func extractMetadata(readmePath string) (string, string, string, []string) {
	content, err := os.ReadFile(readmePath)
	if err != nil {
		return "Unknown", "Unknown", "", nil
	}

	titleRe := regexp.MustCompile(`(?m)^#\s+(.*)`)
	levelRe := regexp.MustCompile(`(?i)Level:\s*(Easy|Medium|Hard)`)
	linkRe := regexp.MustCompile(`\[–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É\]\((https://leetcode\.com/problems/[^)]+)\)`)
	tagsRe := regexp.MustCompile(`(?s)## üè∑ –¢–µ–≥–∏:\s*\n((?:- [^\n]+\n)+)(?:\n---)?`)

	title, level, link := "Unknown", "Unknown", ""
	var tags []string

	if m := titleRe.FindSubmatch(content); m != nil {
		title = string(m[1])
	}
	if m := levelRe.FindSubmatch(content); m != nil {
		level = cases.Title(language.English).String(string(m[1]))
	}
	if m := linkRe.FindSubmatch(content); m != nil {
		link = string(m[1])
	}

	// –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ "## –¢–µ–≥–∏:"
	if tagBlock := tagsRe.FindStringSubmatch(string(content)); len(tagBlock) > 1 {
		lines := strings.Split(tagBlock[1], "\n")
		for _, line := range lines {
			clean := strings.TrimSpace(line)
			clean = strings.TrimPrefix(clean, "-")
			clean = strings.TrimSpace(clean)
			if clean != "" {
				tags = append(tags, clean)
			}
		}
	}

	return title, level, link, tags
}

func extractNumberFromFolder(name string) int {
	re := regexp.MustCompile(`^(\d+)`)
	if m := re.FindStringSubmatch(name); m != nil {
		num, _ := strconv.Atoi(m[1])
		return num
	}
	return 0
}

func generateReadme() {
	var problems []Problem
	skipped := 0

	err := filepath.WalkDir("problems", func(path string, d os.DirEntry, err error) error {
		if err != nil || !d.IsDir() {
			return nil
		}

		readmePath := filepath.Join(path, "README.md")
		if _, err := os.Stat(readmePath); err != nil {
			return nil
		}

		// –ü–∞–ø–∫–∞ –∑–∞–¥–∞—á–∏ ‚Äî –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø—É—Ç–∏
		_, taskDir := filepath.Split(path)
		title, level, link, tags := extractMetadata(readmePath)

		if title == "Unknown" || level == "Unknown" || link == "" {
			fmt.Fprintf(os.Stderr, "‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: %s ‚Äî –Ω–µ—Ç title/level/link\n", path)
			skipped++
			return nil
		}

		number := extractNumberFromFolder(taskDir)
		relativePath := strings.TrimPrefix(path, "problems/")

		problems = append(problems, Problem{
			Number: number,
			Path:   relativePath,
			Title:  title,
			Level:  level,
			Link:   link,
			Tags:   tags,
		})

		return nil
	})
	if err != nil {
		panic(err)
	}

	// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–¥–∞—á–∏
	sort.Slice(problems, func(i, j int) bool {
		return problems[i].Number < problems[j].Number
	})

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è README.md
	var builder strings.Builder
	builder.WriteString("# LeetCode Solutions in Go\n\n")
	builder.WriteString("üéØ –≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á —Å [LeetCode](https://leetcode.com), –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ Go. –ö–∞–∂–¥–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –∫–æ–¥ –∏ —Ç–µ—Å—Ç—ã.\n\n")

	builder.WriteString("## üì¶ –§–∏—á–∏\n\n")
	builder.WriteString("- üß† –ó–∞–¥–∞—á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞–ø–∫–∞—Ö `problems/<range>/<–Ω–æ–º–µ—Ä><–ù–∞–∑–≤–∞–Ω–∏–µ>`\n")
	builder.WriteString("- ‚úÖ –¢–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ `go test ./...`\n")
	builder.WriteString("- üîÑ README –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ `make update-readme`\n")
	builder.WriteString("- üè∑ –¢–µ–≥–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ `make fetch-tags`\n")
	builder.WriteString("- ‚öôÔ∏è –•—É–∫–∏ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ: `gofmt`, `go vet`, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è README\n\n")

	builder.WriteString("## üõ† Makefile –∫–æ–º–∞–Ω–¥—ã\n\n")
	builder.WriteString("| –ö–æ–º–∞–Ω–¥–∞ | –û–ø–∏—Å–∞–Ω–∏–µ |\n")
	builder.WriteString("|--------|----------|\n")
	builder.WriteString("| `make new number=123 title=MyTitle level=Easy` | –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É |\n")
	builder.WriteString("| `make update-readme` | –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å README.md |\n")
	builder.WriteString("| `make test` | –ü—Ä–æ–≥–Ω–∞—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã |\n")
	builder.WriteString("| `make check` | –ü—Ä–æ–≤–µ—Ä–∫–∞ gofmt –∏ go vet |\n")
	builder.WriteString("| `make install-hooks` | –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pre-commit hook |\n")
	builder.WriteString("| `make fetch-tags` | –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–≥–∏ –≤ README –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ |\n\n")

	builder.WriteString("## üîó –ó–∞–¥–∞—á–∏\n\n")
	builder.WriteString("| # | –ù–∞–∑–≤–∞–Ω–∏–µ | –£—Ä–æ–≤–µ–Ω—å | –¢–µ–≥–∏ | –†–µ—à–µ–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ |\n")
	builder.WriteString("|---|----------|---------|------|---------|----------|\n")

	for i, p := range problems {
		tags := "-"
		if len(p.Tags) > 0 {
			tags = strings.Join(p.Tags, ", ")
		}
		builder.WriteString(fmt.Sprintf(
			"| %d | [%d. %s](%s) | %s | %s | [Code](problems/%s/solution.go) | [Explanation](problems/%s/README.md) |\n",
			i+1, p.Number, p.Title, p.Link, p.Level, tags, p.Path, p.Path))
	}

	err = os.WriteFile("README.md", []byte(builder.String()), 0644)
	if err != nil {
		panic(err)
	}

	fmt.Printf("‚úÖ README.md —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω. –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–¥–∞—á: %d\n", skipped)
}

func main() {
	generateReadme()
}
