package main

import (
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"sort"
	"strconv"
	"strings"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

type Problem struct {
	Number int
	Slug   string
	Title  string
	Level  string
	Link   string
}

func extractMetadata(readmePath string) (string, string, string) {
	content, err := os.ReadFile(readmePath)
	if err != nil {
		return "Unknown", "Unknown", ""
	}

	// –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–∏—â–µ–º "Easy", "Medium", "Hard")
	titleRe := regexp.MustCompile(`(?m)^#\s+(.*)`)
	levelRe := regexp.MustCompile(`(?i)Level:\s*(Easy|Medium|Hard)`)
	linkRe := regexp.MustCompile(`\[–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É\]\((https://leetcode\.com/problems/[^)]+)\)`)

	title := "Unknown"
	level := "Unknown"
	link := ""

	if m := titleRe.FindSubmatch(content); m != nil {
		title = string(m[1])
	}
	if m := levelRe.FindSubmatch(content); m != nil {
		level = cases.Title(language.English).String(string(m[1]))
	}
	if m := linkRe.FindSubmatch(content); m != nil {
		link = string(m[1])
	}

	return title, level, link
}

func extractNumberFromSlug(slug string) int {
	re := regexp.MustCompile(`^(\d+)`)
	if m := re.FindStringSubmatch(slug); m != nil {
		num, _ := strconv.Atoi(m[1])
		return num
	}
	return 0
}

func main() {
	problemsDir := "problems"
	var problems []Problem

	entries, err := os.ReadDir(problemsDir)
	if err != nil {
		panic(err)
	}

	skipped := 0

	for _, entry := range entries {
		if entry.IsDir() {
			slug := entry.Name()
			readmePath := filepath.Join(problemsDir, slug, "README.md")
			title, level, link := extractMetadata(readmePath)

			if title == "Unknown" || level == "Unknown" || link == "" {
				fmt.Fprintf(os.Stderr, "‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: %s ‚Äî –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç title/level/link\n", slug)
				skipped++
				continue
			}

			number := extractNumberFromSlug(slug)
			problems = append(problems, Problem{Number: number, Slug: slug, Title: title, Level: level, Link: link})
		}
	}

	sort.Slice(problems, func(i, j int) bool {
		return problems[i].Number < problems[j].Number
	})

	var builder strings.Builder
	builder.WriteString("# LeetCode Solutions in Go\n\n")
	builder.WriteString("üéØ –≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á —Å [LeetCode](https://leetcode.com), –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ Go. –ö–∞–∂–¥–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –∫–æ–¥ –∏ —Ç–µ—Å—Ç—ã.\n\n")
	builder.WriteString("## üì¶ –§–∏—á–∏\n\n")
	builder.WriteString("- üß† –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ –∑–∞–¥–∞—á–∞–º (`problems/<–Ω–æ–º–µ—Ä><–ù–∞–∑–≤–∞–Ω–∏–µ>`)\n")
	builder.WriteString("- ‚úÖ –¢–µ—Å—Ç—ã —á–µ—Ä–µ–∑ `go test ./...`\n")
	builder.WriteString("- üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á —Å–∫—Ä–∏–ø—Ç–æ–º\n")
	builder.WriteString("- üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞—á –≤ `README.md`\n")
	builder.WriteString("- üß™ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ (`gofmt`, `go vet`, `README`)\n\n")

	builder.WriteString("## üõ† Makefile –∫–æ–º–∞–Ω–¥—ã\n\n")
	builder.WriteString("| –ö–æ–º–∞–Ω–¥–∞ | –û–ø–∏—Å–∞–Ω–∏–µ |\n")
	builder.WriteString("|--------|----------|\n")
	builder.WriteString("| `make [new/new-solution/new-problem] number=123 title=MyTitle level=Easy` | –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É |\n")
	builder.WriteString("| `make update-readme` | –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å README.md |\n")
	builder.WriteString("| `make test` | –ü—Ä–æ–≥–Ω–∞—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã |\n")
	builder.WriteString("| `make check` | –ü—Ä–æ–≤–µ—Ä–∫–∞ gofmt –∏ go vet |\n")
	builder.WriteString("| `make install-hooks` | –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pre-commit hook |\n\n")

	builder.WriteString("## üîó –ó–∞–¥–∞—á–∏\n\n")
	builder.WriteString("| # | –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ | –£—Ä–æ–≤–µ–Ω—å | –†–µ—à–µ–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ |\n")
	builder.WriteString("|---|------------------|---------|---------|----------|\n")

	for i, p := range problems {
		builder.WriteString(fmt.Sprintf(
			"| %d | [%d. %s](%s) | %s | [Code](problems/%s/solution.go) | [Explanation](problems/%s/README.md) |\n",
			i+1, p.Number, p.Title, p.Link, p.Level, p.Slug, p.Slug))
	}

	err = os.WriteFile("README.md", []byte(builder.String()), 0644)
	if err != nil {
		panic(err)
	}

	fmt.Printf("‚úÖ README.md —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω. –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–¥–∞—á: %d\n", skipped)
}
